// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// ldmvnorm_rcpp
double ldmvnorm_rcpp(const arma::vec& x, const arma::mat& S);
RcppExport SEXP _mvebnm_ldmvnorm_rcpp(SEXP xSEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(ldmvnorm_rcpp(x, S));
    return rcpp_result_gen;
END_RCPP
}
// loglik_mvebnm_rcpp
double loglik_mvebnm_rcpp(const arma::mat& X, const arma::vec& w, const arma::cube& U, const arma::mat& S);
RcppExport SEXP _mvebnm_loglik_mvebnm_rcpp(SEXP XSEXP, SEXP wSEXP, SEXP USEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(loglik_mvebnm_rcpp(X, w, U, S));
    return rcpp_result_gen;
END_RCPP
}
// compute_posterior_probs_rcpp
arma::mat compute_posterior_probs_rcpp(const arma::mat& X, const arma::vec& w, const arma::cube& U, const arma::mat& S);
RcppExport SEXP _mvebnm_compute_posterior_probs_rcpp(SEXP XSEXP, SEXP wSEXP, SEXP USEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_posterior_probs_rcpp(X, w, U, S));
    return rcpp_result_gen;
END_RCPP
}
// update_prior_covariances_ed_rcpp
arma::cube update_prior_covariances_ed_rcpp(const arma::mat& X, const arma::cube& U, const arma::mat& S, const arma::mat& P);
RcppExport SEXP _mvebnm_update_prior_covariances_ed_rcpp(SEXP XSEXP, SEXP USEXP, SEXP SSEXP, SEXP PSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type P(PSEXP);
    rcpp_result_gen = Rcpp::wrap(update_prior_covariances_ed_rcpp(X, U, S, P));
    return rcpp_result_gen;
END_RCPP
}
// fit_teem_rcpp
Rcpp::List fit_teem_rcpp(Rcpp::NumericMatrix X_mat, Rcpp::NumericVector w_vec, Rcpp::NumericVector U_3d, int maxiter, double converge_tol, double eigen_tol, bool verbose);
RcppExport SEXP _mvebnm_fit_teem_rcpp(SEXP X_matSEXP, SEXP w_vecSEXP, SEXP U_3dSEXP, SEXP maxiterSEXP, SEXP converge_tolSEXP, SEXP eigen_tolSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type X_mat(X_matSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type w_vec(w_vecSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type U_3d(U_3dSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< double >::type converge_tol(converge_tolSEXP);
    Rcpp::traits::input_parameter< double >::type eigen_tol(eigen_tolSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(fit_teem_rcpp(X_mat, w_vec, U_3d, maxiter, converge_tol, eigen_tol, verbose));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_mvebnm_ldmvnorm_rcpp", (DL_FUNC) &_mvebnm_ldmvnorm_rcpp, 2},
    {"_mvebnm_loglik_mvebnm_rcpp", (DL_FUNC) &_mvebnm_loglik_mvebnm_rcpp, 4},
    {"_mvebnm_compute_posterior_probs_rcpp", (DL_FUNC) &_mvebnm_compute_posterior_probs_rcpp, 4},
    {"_mvebnm_update_prior_covariances_ed_rcpp", (DL_FUNC) &_mvebnm_update_prior_covariances_ed_rcpp, 4},
    {"_mvebnm_fit_teem_rcpp", (DL_FUNC) &_mvebnm_fit_teem_rcpp, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_mvebnm(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
